// These tests requires a running SPIRE server and agent with workloads registered (see script `ci.sh`).
// In addition it requires the admin endpoint to be exposed, and the running user to registered
// as an authorized_delegate.

#[cfg(feature = "integration-tests")]
mod integration_tests {
    use spire_api::selectors;
    use std::process::Command;

    fn get_uid() -> u16 {
        let mut uid = String::from_utf8(
            Command::new("id")
                .arg("-u")
                .output()
                .expect("could not get UID")
                .stdout,
        )
        .expect("could not parse to string");
        uid.truncate(uid.len() - 1);
        uid.parse().expect("could not parse uid to number")
    }

    #[tokio::test]
    async fn fetch_delegate_svid() {
        // let uid: u16 = std::env::var("UID").expect("UID env var not present").parse().expect("could not parse uid to number");
        let client = spire_api::agent::delegated_identity::DelegatedIdentityClient::default()
            .await
            .expect("failed to create client");
        let response: spiffe::svid::x509::X509Svid = client
            .fetch_x509_svid(vec![selectors::Selector::Unix(selectors::Unix::Uid(get_uid() + 1))])
            .await
            .expect("Failed to fetch delegate SVID");
        // Not checking the chain as the root is generated by spire.
        // In the future we could look in the downloaded spire directory for the keys.
        assert_eq!(response.cert_chain().len(), 1);
        assert_eq!(
            response.spiffe_id().to_string(),
            "spiffe://example.org/different-process"
        );
    }

    #[tokio::test]
    async fn fetch_trust_bundles() {
        // let uid: u16 = std::env::var("UID").expect("UID env var not present").parse().expect("could not parse uid to number");
        let client = spire_api::agent::delegated_identity::DelegatedIdentityClient::default()
            .await
            .expect("failed to create client");
        let response = client
            .fetch_x509_bundles()
            .await
            .expect("Failed to fetch trust bundles");
        response
            .get_bundle(
                &spiffe::spiffe_id::TrustDomain::new("example.org".as_ref())
                    .expect("Failed to parse trust domain ="),
            )
            .expect("Failed to get bundle");
    }
}
